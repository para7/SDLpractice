*構想メモを兼ねているので、まだ実装されてない機能が書かれてたり、追加忘れも色々あるので注意。

関数は全て名前空間 mySDL です。
using namespace mySDL;


データ型、メンバ変数
＊図形データ共通＊
publicメンバ変数に、座標を示すint型データ　x,y　を持つ。
また、メンバ関数に
描画を行う　draw(Color c = Defines::White)
現在の座標から移動する（x,yに+= or -=演算するのと同様）　move(int x,int y)
指定座標へワープする（x,yに=代入演算するのと同様）　jump(int x,int y)
を持つ。


関数
解説
引数説明

//
void SystemInit(double w_rate,int fps = 60,)
初期化処理。
できるだけ最初に呼び出すもの。

int fps       : 画面更新の頻度を設定できます。

double w_rate : ウィンドウの表示倍率。
                640*480が初期設定で、そこに倍率をかけて縦横を拡大できる。

//


//
bool Update();
画面更新などの処理。Whileループに入れて毎回呼び出す
引数は特にこだわりがなければ使う必要はない

//
bool autoquit(bool call)

call : 終了時Quit自動呼び出しフラグ

falseを渡すと内部でQuit()[下記参照]を呼び出さなくなる
その場合は終了直前にQuit(false)を記述すること

//
void Quit()

初期状態だと、Update()がfalseを返す時に自動で呼び出されるので書く必要はない。
事前設定としてautoQuit()にfalseを渡している場合は、最後にこれを呼び出す。


//
文字描画系

void DrawText(int x, int y,long long value,　　　　　　　 unsigned int fontsize = 20,const SDL_Color &color = Defines::White,const std::string &fontpath = "Yu Gothic Bold.otf",SDL_Rect* drawregion = nullptr,bool skip_drawporcess = false);

void DrawText(int x, int y,double value   ,int digits,　unsigned int fontsize = 20,const SDL_Color &color = Defines::White,const std::string &fontpath = "Yu Gothic Bold.otf",SDL_Rect* drawregion = nullptr,bool skip_drawprocess = false);

void DrawText(int x, int y,std::string str,　　　　　　　　unsigned int fontsize = 20,const SDL_Color &color = Defines::White,const std::string &fontpath = "Yu Gothic Bold.otf",SDL_Rect* drawregion = nullptr,bool skip_drawprocess = false);

文字列を描画。引数がクソわかりにくくなってるので解説。
1,2,の引数はx,yの座標で、描画開始となる左上の座標を指定。
3,value　や　str　には描画したいデータを入れる。double型のみ小数点以下の桁数も指定する必要がある。（引数同じだとlong longにキャストされてしまうので）
ーここまでが必須引数。ー
4,fontsizeは文字の大きさ。TTF_RenderUTF8_Blendedに投げてるだけなので、細かい調整はできないかもしれない。
5,colorは色をいれる。「mySDL::Color : public SDL_Color」を使っても良い。
6.fontpathはフォントへのパスを指定。初期値は環境に応じてhppいじって調整した方が良い。
7.drawregion　は描画領域を指定したいときにポインタを渡しておく。（参照渡しだと、初期値＝渡した値、の時に判別がつかないのでポインタにしてある。）
8.skip_drawprcess（誤字...）は描画工程をスキップする。つまり描画領域だけ取得できる。

SDL_Textureで回転描画ができるのをすっかり忘れてたので、そのうち回転・反転描画機能をつける。