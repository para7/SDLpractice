*構想メモを兼ねているので、まだ実装されてない機能が書かれてたり、追加忘れも色々あるので注意。

関数は全て名前空間 mySDL です。
using namespace mySDL;


データ型、メンバ変数
＊図形データ共通＊
publicメンバ変数に、座標を示すint型データ　x,y　を持つ。
また、メンバ関数に
描画を行う　draw(Color c = Defines::White)
現在の座標から移動する（x,yに+= or -=演算するのと同様）　move(int x,int y)
指定座標へワープする（x,yに=代入演算するのと同様）　jump(int x,int y)
を持つ。


関数
解説
引数説明

//
void SystemInit(double w_rate,int fps = 60,)
初期化処理。
できるだけ最初に呼び出すもの。

int fps       : 画面更新の頻度を設定できます。

double w_rate : ウィンドウの表示倍率。
                640*480が初期設定で、そこに倍率をかけて縦横を拡大できる。

//


//
bool Update();
画面更新などの処理。Whileループに入れて毎回呼び出す
引数は特にこだわりがなければ使う必要はない

//
bool autoquit(bool call)

call : 終了時Quit自動呼び出しフラグ

falseを渡すと内部でQuit()[下記参照]を呼び出さなくなる
その場合は終了直前にQuit(false)を記述すること

//
void Quit()

初期状態だと、Update()がfalseを返す時に自動で呼び出されるので書く必要はない。
事前設定としてautoQuit()にfalseを渡している場合は、最後にこれを呼び出す。


//
文字描画系

DrawText(int x ,int y,int size, string str, string fontname)　他にも引数が複数ある
文字を描画。

class Text
.draw(int x,int y);
bool update();
string ret_string;

内部でTextureを生成して保持するので処理が軽い。
判定用に文字列保持確保しておく方が無駄だと判断したので、同一文字列でもTexureを再生成する。
毎フレーム変化するテキストでもこっちを使うべき。